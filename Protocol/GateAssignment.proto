// # 概述
// 使用 Google 的 Protocol Buffer (简称 protobuf) 定义.
// 停机位分配问题原始输入输出数据格式.
// GateAssignment 定义了算法所需的全部数据.
// GateAssignment.Input 定义了算法所需的全部输入数据.
// GateAssignment.Output 定义了算法所需的全部输出数据, 应输出至提交文件的第二行以后.
// GateAssignment.Submission 定义了向测评系统提交的计算结果文件的信息摘要, 应输出至提交文件的第一行.

syntax = "proto3";

package pb;

option java_package = "pb";
option java_outer_classname = "GateAssignments";
// option cc_enable_arenas = true;


// 主要数据.
message GateAssignment { // 求解算法输入输出数据接口.
  message Input { // 求解停机位分配问题所需的输入数据.
    Airport airport = 1; // 机场.
    repeated Flight flights = 2; // 航班列表.
  }

  message Output { // 求解结果输出数据.
    repeated int32 assignments = 1; // assignments[f] 表示 id 为 f 的航班停靠的停机位 id.
  }
}

message Airport { // 机场信息.
  repeated Gate gates = 1; // 停机位列表.
  int32 bridgeNum = 2; // 近机位数量.
}

message Gate { // 停机位信息.
  int32 id = 1; // 从 0 开始连续编号的内部唯一标识. (id < airport.bridgeNum) 的为近机位.
  int32 minGap = 2; // 两架航班均使用该停机位或其中一架使用与其不兼容的停机位的最短时间间隔.
}

message Flight { // 过站飞机信息.
  int32 id = 1; // 从 0 开始连续编号的内部唯一标识.
  Interval turnaround = 2; // 飞机从降落进港到起飞离港的时间区间. 开始和结束分别对应降落和起飞时间.
  repeated int32 incompatibleGates = 3; // 不能停放的停机位 id 列表.
}

message Interval { // 时间区间.
  int32 begin = 1; // 开始时间.
  int32 end = 2; // 结束时间.
}


message Submission { // 测评系统提交信息摘要.
  // 应在 SDK 内由提交者手工填写的数据项.
  string author = 1; // 提交者姓名.
  string algorithm = 2; // 算法名称.
  string thread = 3; // 算法线程数
  string cpu = 4; // 处理器型号与主频.
  string ram = 5; // 内存容量与频率. (Windows 下可以使用 wmic memorychip 命令查看)
  string language = 6; // 编程语言.
  string compiler = 7; // 编译器.
  string os = 8; // 操作系统

  // 由 SDK 自动记录的数据项.
  string problem = 21; // 问题名称.
  string instance = 22; // 算例名称.
  string duration = 23; // 求解耗时.

  // 由服务器自动计算的数据项.
  double obj = 31; // 计算结果目标函数值.
  string email = 32; // 提交者邮箱.
  string date = 33; // 提交时间.
}
